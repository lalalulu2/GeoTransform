Подключаемся по SSH к мастер-ноде Kubernetes:
ssh -i your_key.pem centos@ip_of_master

Открываем файл /etc/kubernetes/apiserver для редактирования:
sudo vim /etc/kubernetes/apiserver

В строку KUBE_API_ARGS добавляем параметры. Это нужно для того, чтобы заработали Kubeflow и Istio:
--service-account-issuer=kubernetes.default.svc
--service-account-signing-key-file=/etc/kubernetes/certs/ca.key
--service-account-api-audiences=api,istio-ca

Скачиваем пакет с Istio:
curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.3.1 TARGET_ARCH=x86_64 sh -

Добавляем путь к переменной PATH:
export PATH="$PATH:/home/ubuntu/istio/istio-1.3.1/bin"

Проверяем установку:
istioctl verify-install

Если появляется такое сообщение, значит, все готово для установки Istio:
-----------------------
Install Pre-Check passed! The cluster is ready for Istio installation.

Устанавливаем Istio Custom Resource Definitions:
cd ~/istio/istio-1.3.1
for i in install/kubernetes/helm/istio-init/files/crd*yaml; do kubectl apply -f $i; done
kubectl apply -f install/kubernetes/istio-demo.yaml

Нужно проверить, все ли поды запустились:
kubectl get pods -n istio-system

--Устанавливаем Kubeflow--

Сначала нужно скачать и распаковать kfctl — утилиту для работы с Kubeflow.
Затем задаем переменные:
export PATH=$PATH:"~/"
export CONFIG_URI="https://raw.githubusercontent.com/kubeflow/manifests/v1.1-branch/kfdef/kfctl_istio_dex.v1.1.0.yaml"
export KF_NAME=kubeflow-mcs
export BASE_DIR=~/
export KF_DIR=${BASE_DIR}/${KF_NAME}

Далее создаем директорию и конфигурационный файл в ней:
mkdir -p ${KF_DIR}
cd ${KF_DIR}
kfctl build -V -f ${CONFIG_URI}
export CONFIG_FILE=${KF_DIR}/kfctl_istio_dex.v1.1.0.yaml

Нужно отредактировать конфигурационный файл и удалить из него все, что связано с Istio. 
Иначе в процессе установки Kubeflow Istio снова попробует установиться и из-за этого все сломается:
nano $CONFIG_FILE

Применяем конфигурационный файл:
kfctl apply -V -f ${CONFIG_FILE}

Нужно подождать, пока создадутся все поды. Статус подов можно проверить командами:
kubectl get pods -n kubeflow 

и: 
kubectl get pods -n intio-system

Рекомендуется сразу сменить в Kubeflow пароль по умолчанию. Для этого создадим конфигурационный файл для авторизации:
kubectl get configmap dex -n auth -o jsonpath='{.data.config\.yaml}' > dex-config.yaml

Далее открываем конфигурационный файл для редактирования:
nano dex-config.yaml

Применяем этот конфигурационный файл:
kubectl create configmap dex --from-file=config.yaml=dex-config.yaml -n auth --dry-run -oyaml | kubectl apply -f -

Перезапускаем Dex, который отвечает за процесс аутентификации:
kubectl rollout restart deployment dex -n auth

Затем, чтобы Kubeflow был доступен по HTTPS, необходимо в Kubernetes внести изменения в конфигурацию Kubeflow Gateway:
cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |    
{"apiVersion":"networking.istio.io/v1alpha3","kind":"Gateway","metadata":{"annotations":{},"name":"kubeflow-gateway","namespace":"kubeflow"},"spec":{"selector":{"istio":"ingressgateway"},"servers":[{"hosts":["*"],"port":{"name":"h$  creationTimestamp: "2020-11-11T07:34:04Z"
  generation: 1
  name: kubeflow-gateway
  namespace: kubeflow
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
    tls:
      httpsRedirect: true
  - hosts:
    - '*'
    port:
      name: https
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      privateKey: /etc/istio/ingressgateway-certs/tls.key
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
EOF

Примечание. В следующих шагах генерируем самоподписанный сертификат, и Chrome будет выдавать предупреждение, 
когда будем заходить в Kubeflow. При этом может быть проблема, что Kubeflow будет недоступен по внешнему IP-адресу. 
Чтобы это исправить, можно сменить тип istio-ingressgateway на NodePort и обратно на LoadBalancer:
kubectl patch service -n istio-system istio-ingressgateway -p '{"spec": {"type": "NodePort"}}'
Ждем около минуты, затем:
kubectl patch service -n istio-system istio-ingressgateway -p '{"spec": {"type": "LoadBalancer"}}'

Дальше необходимо узнать новый внешний IP-адрес:
kubectl get svc -n istio-system

Необходимо сгенерировать сертификат для этого IP-адреса. 
Ниже в коде на место INSERT_IP_RECEIVED_ON_PREV_STEP нужно вставить IP-адрес из предыдущего шага:
export INGRESS_IP=INSERT_IP_RECEIVED_ON_PREV_STEP

cat <<EOF | kubectl apply -f -
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: istio-ingressgateway-certs
  namespace: istio-system
spec:
  commonName: istio-ingressgateway.istio-system.svc
  # Use ipAddresses if your LoadBalancer issues an IP
  ipAddresses:
  - ${INGRESS_IP}
  isCA: true
  issuerRef:
    kind: ClusterIssuer
    name: kubeflow-self-signing-issuer
  secretName: istio-ingressgateway-certs
EOF

--Запускаем JupyterHub--

Далее нам понадобятся credentials от Docker Hub. Сначала переводим их в base64:
echo -n USER:PASSWORD | base64

Создаем конфигурационный файл, для того чтобы JupyterHub мог работать с docker-registry:
nano config.json

Вставляем код. Вместо generated_base64_string нужно вставить ваш хеш от Docker Hub:
{
"auths": {
    "https://index.docker.io/v1/": {
      "auth": "generated_base64_string"
    }
  }
}

Далее создаем config-map, который будет содержать credentials для доступа к нашему Docker Registry. 
Необходимо указать название вашего Namespace вместо ${NAMESPACE}, в данном примере это admin-kubeflow:
kubectl create --namespace ${NAMESPACE} configmap docker-config --from-file=config.json

Проверяем, что файл создался:
k get configmap -n admin-kubeflow




